swagger: "2.0"
info:
  version: "0.0.1"
  title: Million Songs API
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /msl/v1/loginedge/login:
    x-swagger-router-controller: login_controller
    post:
      description: Logs a user into the system
      tags:
        - Login
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/html
      schemes: ["https"]
      operationId: login
      parameters:
        -
          name: email
          in: formData
          description: Login to the app with user credentials
          required: true
          type: string
        -
          name: password
          in: formData
          description: user password
          required: true
          type: string
      responses:
        "200":
          description: Successfully logged on the user
          schema:
            $ref: "#/definitions/LoginSuccessResponse"
        "401":
          description: Invalid Login Credentials
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/loginedge/logout:
    x-swagger-router-controller: login_controller
    post:
      description: Logs a user out of the system
      tags:
        - Login
      produces:
        - application/json
        - text/html
      operationId: logout
      responses:
        "200":
          description: Logged out
          schema:
            $ref: "#/definitions/StatusResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/loginedge/resetpassword:
    # binds a127 app logic to a route
    x-swagger-router-controller: login_controller
    post:
      description: "Resets the user's password via email"
      tags:
        - Login
      schemes: ["https"]
      operationId: reset_password
      parameters:
        - name: email
          in: formData
          description: Email used to identify the account
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/StatusResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/catalogedge/song/{songId}:
    x-swagger-router-controller: catalog_controller
    get:
      description: "Get a song's info from the database"
      tags:
        - Catalog
      operationId: get_song
      parameters:
        -
          name: songId
          in: path
          description: "The song's identification number"
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SongInfo"
        "404":
          description: Song not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/catalogedge/album/{albumId}:
    x-swagger-router-controller: catalog_controller
    get:
      description: Get data for an Album of songs
      tags:
        - Catalog
      operationId: get_album
      parameters:
        -
          name: albumId
          in: path
          description: Album identification number
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/AlbumInfo"
        "404":
          description: Album not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/catalogedge/artist/{artistId}:
    x-swagger-router-controller: catalog_controller
    get:
      description: Get data on an Artist
      tags:
        - Catalog
      operationId: get_artist
      parameters:
        -
          name: artistId
          in: path
          description: Artist Identifier
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ArtistInfo"
        "404":
          description: Artist not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/catalogedge/facet/{facetId}:
    x-swagger-router-controller: facet_controller
    get:
      description: Get a facet in the heirarchy. Passing a facetId of '~' retrieves the root facet.
      tags:
        - Catalog
      operationId: get_facet
      parameters:
        -
          name: facetId
          in: path
          description: Facet identifier
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/FacetInfoWithChildren"
        "404":
          description: Parent facet not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/catalogedge/browse/album:
    x-swagger-router-controller: catalog_controller
    get:
      description: "Get browsing data for albums in the catalog. The sort order is predetermined: if one or more facets are passed then the order will be alphabetical ascending by album name, if no facets are passed then the results will be in featured order."
      tags:
        - Catalog
      operationId: browse_albums
      parameters:
        -
          $ref: "#/parameters/PagingState"
        -
          $ref: "#/parameters/Items"
        -
          $ref: "#/parameters/Facets"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/AlbumList"
        "400":
          description: "Request parameter error: (1) Invalid pagingState. The string passed as pagingState is not a valid pagingState key. (2) Invalid facets. The string passed as facets is not a valid comma delimited list of valid facet keys."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/catalogedge/browse/artist:
    x-swagger-router-controller: catalog_controller
    get:
      description: "Get browsing data for artists in the catalog. The sort order is predetermined: if one or more facets are passed then the order will be alphabetical ascending by artist name, if no facets are passed then the results will be in featured order."
      tags:
        - Catalog
      operationId: browse_artists
      parameters:
        -
          $ref: "#/parameters/PagingState"
        -
          $ref: "#/parameters/Items"
        -
          $ref: "#/parameters/Facets"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ArtistList"
        "400":
          description: "Request parameter error: (1) Invalid pagingState. The string passed as pagingState is not a valid pagingState key. (2) Invalid facets. The string passed as facets is not a valid comma delimited list of valid facet keys."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/catalogedge/browse/song:
    x-swagger-router-controller: catalog_controller
    get:
      description: "Get browsing data for songs in the catalog. The sort order is predetermined: if one or more facets are passed then the order will be alphabetical ascending by song name, if no facets are passed then the results will be in featured order."
      tags:
        - Catalog
      operationId: browse_songs
      parameters:
        -
          $ref: "#/parameters/PagingState"
        -
          $ref: "#/parameters/Items"
        -
          $ref: "#/parameters/Facets"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SongList"
        "400":
          description: "Request parameter error: (1) Invalid pagingState. The string passed as pagingState is not a valid pagingState key. (2) Invalid facets. The string passed as facets is not a valid comma delimited list of valid facet keys."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/imageedge/artist/{artistId}:
    x-swagger-router-controller: image_controller
    get:
      description: "Get an artist's picture. Result will be an image (png, jpg, etc.)."
      tags:
        - Image
      operationId: get_artist_image
      parameters:
        -
          name: artistId
          in: path
          description: Artist Identifier
          required: true
          type: string
      responses:
        "200":
          description: Successfully acquired artist image
          schema:
            type: file
        "404":
          description: Image not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/imageedge/album/{albumId}:
    x-swagger-router-controller: image_controller
    get:
      description: Get an album cover image. Result will be an image (png, jpg, etc.).
      tags:
        - Image
      operationId: get_album_image
      parameters:
        -
          name: albumId
          in: path
          description: Album id
          required: true
          type: string
      responses:
        "200":
          description: Successfully acquired album cover image
          schema:
            type: file
        "404":
          description: Image not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/imageedge/song/{songId}:
    x-swagger-router-controller: image_controller
    get:
      description: Get a song cover. Result will be an image (png, jpg, etc.).
      tags:
        - Image
      operationId: get_song_image
      parameters:
        -
          name: songId
          in: path
          description: Song id
          required: true
          type: string
      responses:
        "200":
          description: Successfully acquired song cover image
          schema:
            type: file
        "404":
          description: Image not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/ratingsedge/rateartist/{artistId}:
    x-swagger-router-controller: rating_controller
    put:
      description: Update your rating of an album.
      tags:
        - Rating
      schemes: ["https"]
      security: [sessionToken: []]
      consumes:
        - application/x-www-form-urlencoded
      operationId: rate_artist
      parameters:
        -
          name: artistId
          in: path
          description: Id for the artist that is being rated
          required: true
          type: string
        -
          name: rating
          in: formData
          description: "Value between 1-5 that represents the user's rating of the artist"
          required: true
          type: number
        -
          name: sessionToken
          in: header
          description: Authenticated user session token
          type: string
          required: true
      responses:
        "200":
          description: Successfully sent rating data to the server
          schema:
            $ref: "#/definitions/StatusResponse"
        "404":
          description: Song not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/ratingsedge/ratealbum/{albumId}:
    x-swagger-router-controller: rating_controller
    put:
      description: Update your rating of an album.
      tags:
        - Rating
      schemes: ["https"]
      security: [sessionToken: []]
      consumes:
        - application/x-www-form-urlencoded
      operationId: rate_album
      parameters:
        -
          name: albumId
          in: path
          description: Id for the album that is being rated
          required: true
          type: string
        -
          name: rating
          in: formData
          description: "Value between 1-5 that represents the user's rating of the album"
          required: true
          type: number
        -
          name: sessionToken
          in: header
          description: Authenticated user session token
          type: string
          required: true
      responses:
        "200":
          description: Successfully sent rating data to the server
          schema:
            $ref: "#/definitions/StatusResponse"
        "404":
          description: Song not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/ratingsedge/ratesong/{songId}:
    x-swagger-router-controller: rating_controller
    put:
      description: Update your rating of a song.
      tags:
        - Rating
      schemes: ["https"]
      security: [sessionToken: []]
      consumes:
        - application/x-www-form-urlencoded
      operationId: rate_song
      parameters:
        -
          name: songId
          in: path
          description: Id for the song that is being rated
          required: true
          type: string
        -
          name: rating
          in: formData
          description: "Value between 1-5 that represents the user's rating of the song"
          required: true
          type: number
        -
          name: sessionToken
          in: header
          description: Authenticated user session token
          type: string
          required: true
      responses:
        "200":
          description: Successfully sent rating data to the server
          schema:
            $ref: "#/definitions/StatusResponse"
        "404":
          description: Song not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/ratingsedge/commentsong/{songId}:
    x-swagger-router-controller: rating_controller
    put:
      description: Make a comment about a song
      tags:
        - Rating
      schemes: ["https"]
      security: [sessionToken: []]
      operationId: comment_song
      parameters:
        -
          name: songId
          in: path
          description: Id of the song you want to comment on
          required: true
          type: string
        -
          name: sessionToken
          in: header
          description: Authenticated user session token
          type: string
          required: true
      responses:
        "200":
          description: Successfully sent comment data to the server
          schema:
            $ref: "#/definitions/StatusResponse"
        "404":
          description: Song not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/searchedge/search:
    x-swagger-router-controller: search_controller
    get:
      description: Search things that match a user provided string
      tags:
        - Search
      operationId: search_for
      parameters:
        -
          name: searchText
          in: query
          description: User search string
          required: true
          type: string
        -
          name: searchType
          in: query
          description: A string representation of the various types of entities that can be searched.
          required: true
          type: string
          enum: &entityTypes
            - album
            - artist
            - song
      responses:
        "200":
          description: Successfully searched
          schema:
            $ref: "#/definitions/SearchResponse"
        "500":
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/playeredge/play/{songId}:
    x-swagger-router-controller: player_controller
    get:
      description: Request to begin streaming a song. Result will be an mp3.
      tags:
        - Player
      operationId: play_song
      parameters:
        -
          name: songId
          in: path
          description: Song id for the song the user requested
          required: true
          type: string
      responses:
        "200":
          description: Request accepted streaming sound data
          schema:
            type: file
        "404":
          description: Song not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/accountedge/users/recentsongs:
    x-swagger-router-controller: history_controller
    get:
      description: Get recently played songs
      tags:
        - Account
      schemes: ["https"]
      security: [sessionToken: []]
      operationId: get_recent_songs
      responses:
        "200":
          description: Got recent songs!
          schema:
            $ref: "#/definitions/SongList"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/accountedge/users/mylibrary:
    x-swagger-router-controller: mylibrary_controller
    get:
      description: "Get the user's library of favorites"
      tags:
        - Account
      schemes: ["https"]
      security: [sessionToken: []]
      operationId: get_my_library
      responses:
        "200":
          description: Retrieved user library
          schema:
            $ref: "#/definitions/MyLibrary"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/accountedge/users/profile:
    x-swagger-router-controller: catalog_controller
    get:
      description: "Get the current user's account info"
      tags:
        - Account
      schemes: ["https"]
      security: [sessionToken: []]
      operationId: get_user_info
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserInfo"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /msl/v1/accountedge/users/mylibrary/addsong/{songId}:
    x-swagger-router-controller: mylibrary_controller
    put:
      description: "Adds a song to the user library"
      tags:
        - Account
      schemes: ["https"]
      security: [sessionToken: []]
      operationId: add_song
      parameters:
        -
          name: songId
          in: path
          description: Song id for the song to add to the library
          type: string
          required: true
        -
          name: sessionToken
          in: header
          description: Authenticated user session token
          type: string
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/StatusResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /msl/v1/accountedge/users/mylibrary/addalbum/{albumId}:
    x-swagger-router-controller: mylibrary_controller
    put:
      description: "Adds a album to the user library"
      tags:
        - Account
      schemes: ["https"]
      security: [sessionToken: []]
      operationId: add_album
      parameters:
        -
          name: albumId
          in: path
          description: Album id for the album to add to the library
          type: string
          required: true
        -
          name: sessionToken
          in: header
          description: Authenticated user session token
          type: string
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/StatusResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"

securityDefinitions:
  sessionToken:
    type: apiKey
    name: sessionToken
    in: header
#
# Reuseable Parameters
#
parameters:
  Facets:
    name: facets
    in: query
    description: Comma delimited list of facet IDs to use as filters. If not provided, no filters will be applied.
    type: string
  Items:
    name: items
    in: query
    description: Number of items to return. Used for paginating results. The maximum is 100. If not provided, or falls outside the inclusive range 1-100, defaults to 25.
    type: integer
  PagingState:
    name: pagingState
    in: query
    description: PagingState is used to retrieve the next page in a paginated query. A  PagingState instance contains a UUID key to an object in Cassandra on the server. The data within the object allows the server to retrieve the next page of data.
    required: false
    type: string

# complex objects have schema definitions
definitions:
  #
  # complex objects
  #
  AlbumInfo:
    properties:
      album_id:
        type: string
      album_name:
        type: string
      artist_id:
        type: string
      artist_name:
        type: string
      genre:
        type: string
      year:
        description: The year the album was released
        type: number
      average_rating:
        type: number
      personal_rating:
        type: number
      image_link:
        type: string
      songs_list:
        type: array
        items:
          type: string
      in_my_library:
        type: boolean
  ArtistInfo:
    properties:
      artist_id:
        type: string
      artist_name:
        type: string
      albums_list:
        type: array
        items:
          type: string
      average_rating:
        type: number
      personal_rating:
        type: number
      image_link:
        type: string
      songs_list:
        type: array
        items:
          type: string
      genre:
        type: string
      similar_artists_list:
        type: array
        items:
          type: string
      in_my_library:
        type: boolean
  FacetInfo:
    properties:
      facet_id:
        type: string
      name:
        type: string
  FacetInfoWithChildren:
    properties:
      facet_id:
        type: string
      name:
        type: string
      children:
        type: array
        items:
          $ref: "#/definitions/FacetInfo"
  MyLibrary:
    properties:
      albums:
        type: array
        items:
          $ref: "#/definitions/AlbumInfo"
      artists:
        type: array
        items:
          $ref: "#/definitions/ArtistInfo"
      songs:
        type: array
        items:
          $ref: "#/definitions/SongInfo"
  PagingState:
    properties:
      pagingState:
        description: PagingState indicates a position in a paginated query. It is sent from the server with each paginated result and returned to the server to retrieve the next page. A PagingState instance contains a GUID key to an EVCache entry on the server. The value of the EVCache entry contains the original Cassandra query and the PagingState returned after execution of the Cassandra paginated query.
        type: string
  SongInfo:
    properties:
      song_id:
        type: string
      song_name:
        type: string
      image_link:
        type: string
      artist_id:
        type: string
      artist_name:
        type: string
      album_id:
        type: string
      album_name:
        type: string
      duration:
        description: Length of song in seconds
        type: integer
      genre:
        type: string
      danceability:
        type: number
      average_rating:
        type: number
      personal_rating:
        type: number
      song_hotttnesss:
        description: The Echo Nest hotttnesss score
        type: number
      year:
        description: The year the song was released
        type: number
      in_my_library:
        type: boolean
  UserInfo:
    properties:
      userId:
        type: string
      name:
        type: string
      email:
        type: string

  #
  #lists
  #
  AlbumList:
    properties:
      pagingState:
        $ref: "#/definitions/PagingState"
      albums:
        type: array
        items:
          $ref: "#/definitions/AlbumInfo"
  ArtistList:
    properties:
      pagingState:
        $ref: "#/definitions/PagingState"
      artists:
        type: array
        items:
          $ref: "#/definitions/ArtistInfo"
  SongList:
    properties:
      pagingState:
        $ref: "#/definitions/PagingState"
      songs:
        type: array
        items:
          $ref: "#/definitions/SongInfo"

  #
  #responses
  #
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  LoginSuccessResponse:
    properties:
      sessionToken:
        type: string
  NotFoundResponse:
    properties:
      message:
        type: string
  SearchResponse:
    properties:
      search_results:
        type: array
        items:
          type: string
  StatusResponse:
    properties:
      message:
        type: string
