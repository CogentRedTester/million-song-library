swagger: "2.0"
info:
  version: "0.0.1"
  title: Million Songs API
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /api/v1/loginedge/login:
    x-swagger-router-controller: login_controller
    post:
      description: Logs a user into the system
      tags:
        - Login
      consumes: ["application/x-www-form-urlencoded"]
      schemes: ["https"]
      operationId: login
      parameters:
        -
          name: email
          in: formData
          description: Login to the app with user credentials
          required: true
          type: string
        -
          name: password
          in: formData
          description: user password
          required: true
          type: string
      responses:
        "200":
          description: Successfully logged on the user
          schema:
            $ref: "#/definitions/LoginSuccessResponse"
        "401":
          description: Invalid Login Credentials
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/loginedge/logout:
    x-swagger-router-controller: login_controller
    post:
      description: Logs a user out of the system
      tags:
        - Login
      schemes: ["https"]
      security: [session_id: []]
      operationId: logout
      responses:
        "200":
          description: Logged out
          schema:
            $ref: "#/definitions/StatusResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/loginedge/resetpassword:
    # binds a127 app logic to a route
    x-swagger-router-controller: login_controller
    post:
      description: Resets the user's password via email
      tags:
        - Login
      schemes: ["https"]
      operationId: reset_password
      parameters:
        - name: email
          in: formData
          description: Email used to identify the account
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/StatusResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/loginedge/sessioninfo:
    x-swagger-router-controller: session_controller
    get:
      description: Endpoint for api services to get session data from session token
      tags:
        - Login
      schemes: ["https"]
      security: [session_id: []]
      operationId: get_session_info
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SessionInfo"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/catalogedge/song/{songId}:
    x-swagger-router-controller: catalog_controller
    get:
      description: Get a song's info from the database
      tags:
        - Catalog
      operationId: get_song
      parameters:
        -
          name: songId
          in: path
          description: The song's identification number
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SongInfo"
        "404":
          description: Song not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/catalogedge/album/{albumId}:
    x-swagger-router-controller: catalog_controller
    get:
      description: Get data for an Album of songs
      tags:
        - Catalog
      operationId: get_album
      parameters:
        -
          name: albumId
          in: path
          description: Album identification number
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/AlbumInfo"
        "404":
          description: Album not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/catalogedge/artist/{artistId}:
    x-swagger-router-controller: catalog_controller
    get:
      description: Get data on an Artist
      tags:
        - Catalog
      operationId: get_artist
      parameters:
        -
          name: artistId
          in: path
          description: Artist Identifier
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ArtistInfo"
        "404":
          description: Artist not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/catalogedge/facet/{facetId}:
    x-swagger-router-controller: facet_controller
    get:
      description: Get a facet in the heirarchy. Passing a facetId of \"~\" retrieves the root facet.
      tags:
        - Catalog
      operationId: get_facet
      parameters:
        -
          name: facetId
          in: path
          description: Facet identifier
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/FacetInfoWithChildren"
        "404":
          description: Parent facet not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/catalogedge/browse/album:
    x-swagger-router-controller: catalog_controller
    get:
      description: Get browsing data for albums in the catalog
      tags:
        - Catalog
      operationId: browse_albums
      parameters:
        -
          name: pos
          in: query
          description: Used for paginating results. Start with next album after this position. If not provided, defaults to the beginning. This string is sourced from the "last_pos" field in the server response from the previous album page.
          type: string
        -
          name: items
          in: query
          description: Number of items to return. Used for paginating results. The maximum is 100. If not provided, or falls outside the inclusive range 1-100, defaults to 25.
          type: integer
        -
          name: facets
          in: query
          description: Comma delimited list of facets to use as filters. If not provided, no filters will be applied.
          type: string
        -
          name: sort_fields
          in: query
          description: Comma delimited list of fields on which to sort. If not provided, results will be sorted by album name.
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/AlbumList"
        "400":
          description: "Request parameter error: (1) Invalid pos. The string passed as pos is not a valid pos key. (2) Invalid facets. The string passed as facets is not a valid comma delimited list of valid facet keys."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/catalogedge/browse/artist:
    x-swagger-router-controller: catalog_controller
    get:
      description: Get browsing data for artists in the catalog
      tags:
        - Catalog
      operationId: browse_artists
      parameters:
        -
          name: pos
          in: query
          description: Used for paginating results. Start with next artist after this position. If not provided, defaults to the beginning. This string is sourced from the "last_pos" field in the server response from the previous artist page.
          type: string
        -
          name: items
          in: query
          description: Number of items to return. Used for paginating results. The maximum is 100. If not provided, or falls outside the inclusive range 1-100, defaults to 25.
          type: integer
        -
          name: facets
          in: query
          description: Comma delimited list of facets to use as filters. If not provided, no filters will be applied.
          type: string
        -
          name: sort_fields
          in: query
          description: Comma delimited list of fields on which to sort. If not provided, results will be sorted by artist name.
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ArtistList"
        "400":
          description: "Request parameter error: (1) Invalid pos. The string passed as pos is not a valid pos key. (2) Invalid facets. The string passed as facets is not a valid comma delimited list of valid facet keys."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/catalogedge/browse/song:
    x-swagger-router-controller: catalog_controller
    get:
      description: Get browsing data for songs in the catalog
      tags:
        - Catalog
      operationId: browse_songs
      parameters:
        -
          name: pos
          in: query
          description: Used for paginating results. Start with next song after this position. If not provided, defaults to the beginning. This string is sourced from the "last_pos" field in the server response from the previous song page.
          type: string
        -
          name: items
          in: query
          description: Number of items to return. Used for paginating results. The maximum is 100. If not provided, or falls outside the inclusive range 1-100, defaults to 25.
          type: integer
        -
          name: facets
          in: query
          description: Comma delimited list of facets to use as filters. If not provided, no filters will be applied.
          type: string
        -
          name: sort_fields
          in: query
          description: Comma delimited list of fields on which to sort. If not provided, results will be sorted by song name.
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SongList"
        "400":
          description: "Request parameter error: (1) Invalid pos. The string passed as pos is not a valid pos key. (2) Invalid facets. The string passed as facets is not a valid comma delimited list of valid facet keys."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/imageedge/artist/{artistId}:
    x-swagger-router-controller: image_controller
    get:
      description: "Get an artist's picture. Result will be an image (png, jpg, etc.)."
      tags:
        - Image
      operationId: get_artist_image
      parameters:
        -
          name: artistId
          in: path
          description: Artist Identifier
          required: true
          type: string
      responses:
        "200":
          description: Successfully acquired artist image
          schema:
            type: file
        "404":
          description: Image not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/imageedge/album/{albumId}:
    x-swagger-router-controller: image_controller
    get:
      description: Get an album cover image. Result will be an image (png, jpg, etc.).
      tags:
        - Image
      operationId: get_album_image
      parameters:
        -
          name: albumId
          in: path
          description: Album id
          required: true
          type: string
      responses:
        "200":
          description: Successfully acquired album cover image
          schema:
            type: file
        "404":
          description: Image not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/imageedge/song/{songId}:
    x-swagger-router-controller: image_controller
    get:
      description: Get a song cover. Result will be an image (png, jpg, etc.).
      tags:
        - Image
      operationId: get_song_image
      parameters:
        -
          name: songId
          in: path
          description: Song id
          required: true
          type: string
      responses:
        "200":
          description: Successfully acquired song cover image
          schema:
            type: file
        "404":
          description: Image not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/ratingsedge/ratesong/{songId}:
    x-swagger-router-controller: rating_controller
    put:
      description: Update your rating of a song.
      tags:
        - Rating
      schemes: ["https"]
      security: [session_id: []]
      operationId: rate_song
      parameters:
        -
          name: songId
          in: path
          description: Id for the song that is being rated
          required: true
          type: string
        -
          name: rating
          in: formData
          description: Value between 1-5 that represents the user's rating of the song
          required: true
          type: number
      responses:
        "200":
          description: Successfully sent rating data to the server
          schema:
            $ref: "#/definitions/StatusResponse"
        "404":
          description: Song not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/ratingsedge/commentsong/{songId}:
    x-swagger-router-controller: rating_controller
    put:
      description: Make a comment about a song
      tags:
        - Rating
      schemes: ["https"]
      security: [session_id: []]
      operationId: comment_song
      parameters:
        -
          name: songId
          in: path
          description: Id of the song you want to comment on
          required: true
          type: string
      responses:
        "200":
          description: Successfully sent comment data to the server
          schema:
            $ref: "#/definitions/StatusResponse"
        "404":
          description: Song not found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/searchedge/search:
    x-swagger-router-controller: search_controller
    get:
      description: Search things that match a user provided string
      tags:
        - Search
      schemes: ["https"]
      security: [session_id: []]
      operationId: search_for
      parameters:
        -
          name: search_text
          in: formData
          description: User search string
          required: true
          type: string
        -
          name: searchType
          in: query
          description: type of thing to search for Album, Artist, Song
          type: string
      responses:
        "200":
          description: Successfully searched
          schema:
            $ref: "#/definitions/SearchResponse"
        "500":
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/playeredge/play/{songId}:
    x-swagger-router-controller: player_controller
    get:
      description: Request to begin streaming a song. Result will be an mp3.
      tags:
        - Player
      operationId: play_song
      parameters:
        -
          name: songId
          in: path
          description: Song id for the song the user requested
          required: true
          type: string
      responses:
        "200":
          description: Request accepted streaming sound data
          schema:
            type: file
        "404":
          description: Song not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/accountedge/users/recentsongs:
    x-swagger-router-controller: history_controller
    get:
      description: Get recently played songs
      tags:
        - Account
      schemes: ["https"]
      security: [session_id: []]
      operationId: get_recent_songs
      responses:
        "200":
          description: Got recent songs!
          schema:
            $ref: "#/definitions/SongList"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/accountedge/users/mylibrary:
    x-swagger-router-controller: history_controller
    get:
      description: Get the user's library of songs
      tags:
        - Account
      schemes: ["https"]
      security: [session_id: []]
      operationId: get_my_library
      responses:
        "200":
          description: Retrieved user library
          schema:
            $ref: "#/definitions/SongList"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/accountedge/users/profile:
    x-swagger-router-controller: catalog_controller
    get:
      description: Get the current user's account info
      tags:
        - Account
      schemes: ["https"]
      security: [session_id: []]
      operationId: get_user_info
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserInfo"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
securityDefinitions:
  session_id:
    type: apiKey
    name: SessionId
    in: header
# complex objects have schema definitions
definitions:
  #
  # complex objects
  #
  AlbumInfo:
    properties:
      album_id:
        type: string
      album_name:
        type: string
      artist_id:
        type: string
      artist_name:
        type: string
      genre:
        type: string
      year:
        description: The year the album was released
        type: number
      average_rating:
        type: number
      personal_rating:
        type: number
      image_link:
        type: string
      songs_list:
        type: array
        items:
          type: string
  ArtistInfo:
    properties:
      artist_id:
        type: string
      artist_name:
        type: string
      albums_list:
        type: array
        items:
          type: string
      average_rating:
        type: number
      personal_rating:
        type: number
      image_link:
        type: string
      songs_list:
        type: array
        items:
          type: string
      similar_artists_list:
        type: array
        items:
          type: string
  FacetInfo:
    properties:
      facet_id:
        type: string
      name:
        type: string
  FacetInfoWithChildren:
    properties:
      facet_id:
        type: string
      name:
        type: string
      children:
        type: array
        items:
          $ref: "#/definitions/FacetInfo"
  SongInfo:
    properties:
      song_id:
        type: string
      song_name:
        type: string
      image_link:
        type: string
      artist_id:
        type: string
      artist_name:
        type: string
      album_id:
        type: string
      album_name:
        type: string
      duration:
        description: Length of song in seconds
        type: integer
      genre:
        type: string
      danceability:
        type: number
      average_rating:
        type: number
      personal_rating:
        type: number
      song_hotttnesss:
        description: The Echo Nest hotttnesss score
        type: number
      year:
        description: The year the song was released
        type: number
  UserInfo:
    properties:
      userId:
        type: string
      name:
        type: string
      email:
        type: string
  
  #
  #lists
  #
  AlbumList:
    properties:
      last_pos:
        description: The key to pass as the "pos" parameter when retrieving the next page
        type: string
      albums:
        type: array
        items:
          $ref: "#/definitions/AlbumInfo"
  ArtistList:
    properties:
      last_pos:
        description: The key to pass as the "pos" parameter when retrieving the next page
        type: string
      artists:
        type: array
        items:
          $ref: "#/definitions/ArtistInfo"
  SessionInfo:
    properties:
      userId:
        type: string
      userEmail:
        type: string
  SongList:
    properties:
      last_pos:
        description: The key to pass as the "pos" parameter when retrieving the next page.
        type: string
      songs:
        type: array
        items:
          $ref: "#/definitions/SongInfo"
  
  #
  #responses
  #
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  LoginSuccessResponse:
    required:
      - sessionToken
    properties:
      sessionToken:
        type: string
  NotFoundResponse:
    type: string
  SearchResponse:
    properties:
      search_results:
        type: array
        items:
          type: string
  StatusResponse:
    required:
      - message
    properties:
      message:
        type: string
