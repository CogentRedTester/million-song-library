swagger: "2.0"
info:
  version: "0.0.1"
  title: Million Songs API
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /api/loginedge/login:
    x-swagger-router-controller: login_controller
    post:
      tags:
        - Login
      consumes: ["application/x-www-form-urlencoded"]
      schemes: ["https"]
      description: Logs a user into the system
      operationId: login
      parameters:
        -
          name: email
          in: formData
          description: Login to the app with user credentials
          required: true
          type: string
        -
          name: password
          in: formData
          description: user password
          required: true
          type: string
      responses:
        "200":
          description: Successfully logged on the user
          schema:
            $ref: "#/definitions/LoginSuccessResponse"
        "401":
          description: Invalid Login Credentials
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/loginedge/logout:
    x-swagger-router-controller: login_controller
    post:
      security: [session_id: []]
      description: Log out a user
      tags:
        - Login
      operationId: logout
      responses:
        "200":
          description: Logged out
          schema:
            $ref: "#/definitions/StatusResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/loginedge/resetpassword:
    # binds a127 app logic to a route
    x-swagger-router-controller: login_controller
    post:
      schemes: ["https"]
      description: "Resets the user's password via email."
      tags:
        - Login
      operationId: reset_password
      parameters:
        - name: email
          in: formData
          description: Email used to identify the account
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/StatusResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/loginedge/sessioninfo/{sessionId}:
    x-swagger-router-controller: session_controller
    get:
      description: Endpoint for api services to get session data from session token.
      tags:
        - Login
      operationId: session_info
      parameters:
        -
          name: sessionId
          in: path
          description: The session to retrieve data for.
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SessionInfo"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/catalogedge/song/{songId}:
    x-swagger-router-controller: catalog_controller
    get:
      description: "Get a song's info from the database"
      operationId: getSongById
      tags:
        - Catalog
      parameters:
        -
          name: songId
          in: path
          description: "The song's identification number."
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SongInfo"
        "404":
          description: Song not found.
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/catalogedge/albums:
    x-swagger-router-controller: album_controller
    get:
      description: Get list of all albums
      tags:
        - Album
      operationId: getAlbums
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/AlbumsList"
        "404":
          description: Album not found.
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/catalogedge/albums/{albumId}:
    x-swagger-router-controller: album_controller
    get:
      description: Get data for an Album of songs
      tags:
        - Album
      operationId: getAlbumById
      parameters:
        -
          name: albumId
          in: path
          description: Album identification number
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/AlbumInfo"
        "404":
          description: Album not found.
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/catalogedge/artists/{artistId}:
    x-swagger-router-controller: artist_controller
    get:
      description: Recovers a artist by its id
      tags:
        - Artist
      operationId: getArtist
      parameters:
        -
          name: artistId
          in: path
          description: Artist Identifier
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ArtistInfo"
        "404":
          description: Artist not found.
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/catalogedge/genres:
    x-swagger-router-controller: genre_controller
    get:
      description: "Gets the existing genres"
      tags:
        - Genre
      operationId: genreList
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GenreList"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/catalogedge/genres/{genreName}:
    x-swagger-router-controller: genre_controller
    get:
      description: Get the subgenres of the genre
      tags:
        - Genre
      operationId: getGenre
      parameters:
        -
          name: genreName
          in: path
          description: genre name
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GenreList"
        "404":
          description: Genre not found.
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/catalogedge/browse/catalog:
    x-swagger-router-controller: catalog_controller
    get:
      description: Get browsing data for songs in the catalog. If the "last" and "items"  parameters are not passed the default response is 25 items starting from the beginning.
      # security: { session_id: [] }
      operationId: browseCatalog
      tags:
        - Catalog
      parameters:
        -
          name: last
          in: query
          description: Start with songs from this index, if not provided starts at 0.
          type: string
        -
          name: items
          in: query
          description: Number of items to return. The maximum is 100.
          type: integer
        -
          name: genre
          in: query
          description: Genre of songs to return.
          type: string
        -
          name: year
          in: query
          description: Year the song was released
          type: string
        -
          name: artist
          in: query
          description: Artist associated with the song
          type: string
        -
          name: album
          in: query
          description: Album song was released in.
          type: string
        -
          name: rating
          in: query
          description: Mininum song rating
          type: integer
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SongList"
        "404":
          description: Index not found.
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/catalogedge/artists:
      x-swagger-router-controller: artist_controller
      get:
        description: Get all Artists
        tags:
          - Artist
        operationId: artistList
        responses:
          "200":
            description: Success
            schema:
              $ref: "#/definitions/ArtistList"
          "500":
            description: Server Error
            schema:
              $ref: "#/definitions/ErrorResponse"
  /api/imageedge/artists/{artistId}:
    x-swagger-router-controller: image_controller
    get:
      description: Get an artist's picture.
      tags:
        - Image
      operationId: artist_image
      parameters:
        -
          name: artistId
          in: path
          description: Artist Identifier
          required: true
          type: string
      responses:
        "200":
          description: Successfully acquired artist image.
          schema:
            $ref: "#/definitions/Image"
        "404":
          description: Image not found.
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/catalogedge/artists/{artistId}/albums:
    x-swagger-router-controller: artist_controller
    get:
      description: Get the albums of a artist
      tags:
        - Albums
      operationId: getArtistAlbums
      parameters:
        -
          name: artistId
          in: path
          description: artist identifier
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/AlbumsList"
        "404":
          description: No albums found for this artist.
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/imageedge/album/{albumId}:
    x-swagger-router-controller: image_controller
    get:
      description: Get an album cover
      tags:
        - Image
      operationId: album_cover
      parameters:
        -
          name: albumId
          in: path
          description: Album id
          required: true
          type: string
      responses:
        "200":
          description: Successfully acquired album cover image.
          schema:
            $ref: "#/definitions/Image"
        "404":
          description: Image not found.
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/imageedge/track/{songId}:
    x-swagger-router-controller: image_controller
    get:
      description: Get a track cover
      tags:
        - Image
      operationId: track_cover
      parameters:
        -
          name: songId
          in: path
          description: Song id
          required: true
          type: string
      responses:
        "200":
          description: Successfully acquired track cover image.
          schema:
            $ref: "#/definitions/Image"
        "404":
          description: Image not found.
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/ratingsedge/ratesong/{songId}:
    x-swagger-router-controller: rating_controller
    put:
      description: Update your rating of a song.
      security: [session_id: []]
      tags:
        - Rating
      operationId: rate_song
      parameters:
        -
          name: songId
          in: path
          description: Id for the song that is being rated.
          required: true
          type: string
        -
          name: rating
          in: formData
          description: "Value between 1-5 that represents the user's rating of the song."
          required: true
          type: number
      responses:
        "200":
          description: Successfully sent rating data to the server.
          schema:
            $ref: "#/definitions/StatusResponse"
        "404":
          description: Song not found.
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/ratingsedge/commentsong/{songId}:
    x-swagger-router-controller: rating_controller
    put:
      description: Make a comment about a song.
      security: [session_id: []]
      tags:
        - Rating
      operationId: comment_song
      parameters:
        -
          name: songId
          in: path
          description: Id of the song you want to comment on.
          required: true
          type: string
      responses:
        "200":
          description: Successfully sent comment data to the server.
          schema:
            $ref: "#/definitions/StatusResponse"
        "404":
          description: Song not found.
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/searchedge/search:
    x-swagger-router-controller: search_controller
    get:
      description: Search things that match a user provided string.
      security: [session_id: []]
      tags:
        - Search
      operationId: search_for
      parameters:
        -
          name: search_text
          in: formData
          description: User search string
          required: true
          type: string
        -
          name: searchType
          in: query
          description: type of thing to search for Album, Artist, Song
          type: string
      responses:
        "200":
          description: Successfully searched.
          schema:
            $ref: "#/definitions/SearchResponse"
        "500":
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/playeredge/play/{songId}:
    x-swagger-router-controller: player_controller
    get:
      description: Get song data to play a song
      security: [session_id: []]
      tags:
        - Player
      operationId: play_song
      parameters:
        -
          name: songId
          in: path
          description: Song id for the song the user requested
          required: true
          type: string
      responses:
        "200":
          description: Request accepted streaming sound data.
          schema:
            $ref: "#/definitions/SoundData"
        "404":
          description: Song not found.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/accountedge/users/recentsongs:
    x-swagger-router-controller: history_controller
    get:
      description: Get recently played songs
      security: [session_id: []]
      tags:
        - Account
      operationId: recent_songs
      responses:
        "200":
          description: Got recent songs!
          schema:
            $ref: "#/definitions/SongList"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/accountedge/users/mylibrary:
    x-swagger-router-controller: library_controller
    get:
      description: "Get the user's library of songs."
      #security: [session_id: []]
      tags:
        - Account
      operationId: song_library
      responses:
        "200":
          description: Retrieved user library.
          schema:
            $ref: "#/definitions/SongList"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/accountedge/users/mylibrary/add:
    x-swagger-router-controller: library_controller
    post:
      description: "adds a song to the user's library"
      #security: [session_id: []]
      tags:
        - Account
      operationId: add_to_library
      parameters:
        -
          name: songId
          in: formData
          description: Song id for the song to add to the library
          required: true
          type: string
      responses:
        "200":
          description: Successfully added song to my library.
          schema:
            $ref: "#/definitions/StatusResponse"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/accountedge/users/profile:
    x-swagger-router-controller: catalog_controller
    get:
      description: "Get the current user's account info"
      security: [session_id: []]
      tags:
        - Account
      operationId: user_info
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserInfo"
        "500":
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
securityDefinitions:
  session_id:
    type: apiKey
    name: SessionId
    in: header

# =============================================================================================DEFINITIONS
# complex objects have schema definitions
definitions:
  LoginSuccessResponse:
    required:
      - sessionToken
    properties:
      sessionToken:
        type: string
  StatusResponse:
    required:
      - message
    properties:
      message:
        type: string
  UserInfo:
    properties:
      name:
        type: string
      userId:
        type: string
      email:
        type: string
  Song_id:
    type: string
  SongInfo:
    properties:
      song_id:
        $ref: "#/definitions/Song_id"
      song_name:
        type: string
      link_to_image:
        type: string
      artist_mbid:
        type: string
      artist_name:
        type: string
      duration:
        description: Length of song in seconds.
        type: integer
      danceability:
        type: number
      average_rating:
        type: number
      release:
        description: Album the song was released in.
        type: string
      song_hotttnesss:
        description: The Echo Nest hotttnesss score
        type: number
      genre_name:
        description: The genre name
        type: string
  AlbumInfo:
    properties:
      album_id:
        type: string
      album_name:
        type: string
      link_to_image:
        type: string
      album_year:
        type: string
      artist:
        type: string
      genre:
        type: string
      songs_list:
        type: array
        items:
          $ref: "#/definitions/Song_id"
  Image:
    properties:
      name:
        type: string
      data:
        type: string
        format: binary
  SoundData:
    properties:
      name:
        type: string
      data:
        type: string
        format: binary
  ArtistInfo:
    properties:
      artist_name:
        type: string
      artistId:
        type: string
      artist_mbid:
        type: string
      albums_list:
        type: array
        items:
          $ref: "#/definitions/Album_id"
      link_to_image:
        type: string
      songs_list:
        type: array
        items:
          $ref: "#/definitions/Song_id"
  Album_id:
    type: string
  GenreList:
    properties:
      genre:
        type: string
      genres:
        type: array
        items:
          $ref: "#/definitions/GenreInfo"
  GenreInfo:
    properties:
      genre_name:
        type: string
  SearchResponse:
    properties:
      search_results:
        type: array
        items:
          $ref: "#/definitions/SearchResult"
  SearchResult:
    type: string
  SongList:
    properties:
      genre:
        type: string
      songs:
        type: array
        items:
          $ref: "#/definitions/SongInfo"
  ArtistList:
    properties:
      artists:
        type: array
        items:
          $ref: "#/definitions/ArtistInfo"
  AlbumsList:
    properties:
      albums:
        type: array
        items:
          $ref: "#/definitions/AlbumInfo"
  SessionInfo:
    properties:
      userId:
        type: string
      userEmail:
        type: string
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  NotFoundResponse:
    type: string
