Kenzan Million Song Library Demonstration
=========================================
Bill Schwanitz <bschwanitz@kenzan.com>
:Author Initials: WES
:toc:
:icons:
:numbered:
:website: http://kenzan.com/

Introduction
------------
Some marketing-ish description of what MSL is and why Kenzan is
working on it

Tools
-----

API Documentation and Code Generation 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The Swagger open-source tool (http://github.com/swagger-api) allows
the team to unify the documentation of the API with the generation
of client and server code. This assures that the documentation
is always in sync with the code. Further, it allows the team to
publish the documentation in various formats. 

Documentation
~~~~~~~~~~~~~
The AsciiDoc open-source tool (http://asciidoc.org/) allows the team
to produce documentation that can then be formatted and published in 
a variety of formats. 

Client
------

Architecture
~~~~~~~~~~~~
[red]#TBA#: a diagram of the client architecture

Language(s) and Frameworks
~~~~~~~~~~~~~~~~~~~~~~~~~~
[red]#TBA#: some details need to be added here

Server
------

Architecture
~~~~~~~~~~~~
[red]#TBA#: a diagram of the client architecture

Language(s) and Frameworks
~~~~~~~~~~~~~~~~~~~~~~~~~~
The back-end server is written in Java - Enterprise Edition 1.8, to be exact. Communication between client and server is performed using a RESTful web service over HTTP. The REST code stubs, generated by Swagger (http://github.com/swagger-api), use JaxRs annotations (http://jax-rs-spec.java.net). Java's Jersey library (http://jersey.java.net) is used as the implementation of the JaxRs API. JUnit is used as out unit testing framework.

Portions of the Netflix OSS stack are used to provide cloud services. At its foundation, the server is based on Karyon (http://github.com/Netflix/karyon) - this enables the use of other useful Netflix OSS tools. For example, Archaius (http://github.com/Netflix/archaius) is used as the configuration manager allowing the service to react to changes in configuration parameters dynamically, and EVCache (http://github.com/Netflix/EVCache) is used as the highly available, distributed memory cache.

All data is persisted using Apache's Cassandra (http://cassandra.apache.org). Cassandra is a highly available, scalable NoSQL database. The DataStax Java driver (http://datastax.github.io/java-driver) is used to interface the Java code with the Cassandra database.

That is a *LOT* of information. Let's summarize...

.Server Languages and Frameworks
[width="80%",cols="6,^3,^3,8",options="header"]
|=======================
|Use                      |Name        |Vendor      |URL
|Language                 |Java EE 1.8 |Oracle      |http://www.java.com
|API Documentor/Generator |Swagger     |open-souce  |http://github.com/swagger-api
|ReST API                 |JaxRs       |Oracle      |http://jax-rs-spec.java.net
|ReST Implementation      |Jersey      |Oracle      |http://jersey.java.net
|Unit Testing             |JUnit       |JUnit       |http://junit.org/
|Cloud Infrastructure     |Karyon      |Netflix OSS |http://github.com/Netflix/karyon
|Configuration Management |Archaius    |Netflix OSS |http://github.com/Netflix/archaius
|Memory Cache             |EVCache     |Netflix OSS |http://github.com/Netflix/EVCache
|Database                 |Cassandra   |Apache      |http://cassandra.apache.org
|Database Driver          |DataStax    |DataStax    |http://datastax.github.io/java-driver
|=======================

Database
~~~~~~~~
[red]#TBA#: Add Cassandra schema info here once it is developed
